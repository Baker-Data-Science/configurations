FROM nvidia/cuda:11.8.0-devel-ubuntu20.04

# Install System Dependencies
RUN useradd -ms /bin/bash usr_lammps \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt install -y \
    autoconf \
    automake \
    build-essential \
    clang \
    clang-format \
    curl \
    ffmpeg \
    flex \
    git \
    gcc \
    g++ \
		htop \
    cmake \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    libtool \
    make \
    python3 \
    python3-pip \
    python3-venv \
    wget \
		software-properties-common \
    screen \
    tmux \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /root/workspace/ \
    && mkdir -p /home/usr_lammps/workspace/

# move ./bin files to /root/ and /home/usr_lammps/
COPY ./bin/* /root/
COPY ./bin/* /home/usr_lammps/

# Install NVM and Node.js v19.0.0
ENV NVM_DIR /usr/local/nvm
ENV NODE_VERSION 19.0.0

RUN mkdir -p $NVM_DIR \
    && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash \
    && . $NVM_DIR/nvm.sh \
    && nvm install $NODE_VERSION \
    && nvm alias default $NODE_VERSION \
    && nvm use default

ENV NODE_PATH $NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules
ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

# Download and compile Vim 9.0
RUN add-apt-repository ppa:jonathonf/vim \
    && apt-get update \
		&& DEBIAN_FRONTEND=noninteractive apt install -y vim

# Install Vim-Plug for Vim plugin management
RUN curl -fLo /root/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
    && curl -fLo /home/usr_lammps/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim


# Locales
ENV CUDA_VISIBLE_DEVICES=all LANG=C.UTF-8 LANGUAGE=C.UTF-8 LC_ALL=C.UTF-8

# Scientific Computing
RUN git clone --recursive https://github.com/open-mpi/ompi.git \
    # Open MPI
    && cd ompi \
    && ./autogen.pl \
    && ./configure --prefix=/usr/local --with-cuda=/usr/local/cuda/ \
    && make -j $(nproc) all \
    && make install \
    && ldconfig \
    && cd .. && rm -rf ompi \
    # LAMMPS
    && git clone -b stable https://github.com/lammps/lammps.git \
    && cd lammps \
    && git pull \
    && echo "ADD_SUBDIRECTORY(reax)" >> ./src/CMakeLists.txt \
    && mkdir build \
    && cd build \
    && cmake ../cmake -D PKG_OPENMP=yes -D PKG_REAXFF=yes -D PKG_MANYBODY=yes -D ENABLE_MPI=on -D CMAKE_INSTALL_PREFIX=/usr/local \
    && make -j $(nproc) \
    && make install \
    && cd ../python \
    && pip3 install . \
    && git clone https://gitlab.com/petsc/petsc.git \
    # PETSc
    && cd petsc \
    && ./configure --with-debugging=0 --with-tests=0 --COPTFLAGS="-O3" --CXXOPTFLAGS="-O3" --FOPTFLAGS="-O3" --with-mpi=1 --download-f2cblaslapack=1 --download-mpich \
    && make PETSC_DIR=$PWD PETSC_ARCH=arch-linux-c-opt 


# Install Miniconda
ENV MINICONDA_VERSION Miniconda3-py39_4.12.0-Linux-x86_64.sh
ENV MINICONDA_MD5 78f39f9bae971ec1ae7969f0516017f2413f17796670f7040725dd83fcff5689
RUN wget https://repo.anaconda.com/miniconda/$MINICONDA_VERSION \
    && bash $MINICONDA_VERSION -b -p /miniconda \
    && rm -f $MINICONDA_VERSION \
    && /miniconda/bin/conda clean -tipsy \
    && ln -s /miniconda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \
    && echo ". /miniconda/etc/profile.d/conda.sh" >> /root/.bashrc \
    && echo "conda activate base" >> /root/.bashrc

ENV PATH /miniconda/bin:$PATH

# Install Python Packages
RUN pip3 install \
    # Data IO
    awscli \
    # Python Development
    black \
    pre-commit \
    psutil \
    pytest \
    pytest-mpi \
    pytorch-lightning \
    seaborn \
    tensorflow \
    tqdm \
    yacs \
    # Python Notebooks
    ipynb \
		jupyter \
    # Machine Learning
    torch==1.13.1 \
    deepspeed \
    hydra-core \
    matplotlib \
    pandas \
    pickle5 \
    tensorboard \
    wandb \
    # Computer Vision
    torchvision==0.14.1 \
    # Wheel
    --extra-index-url https://download.pytorch.org/whl/cu116 \
    # Graph Learning
    && pip3 install \
        pyg_lib \
        torch_scatter==2.1.0+pt113cu116 \
        torch_sparse==0.6.16+pt113cu116 \
        torch_cluster==1.6.0+pt113cu116 \
        torch_spline_conv==1.2.1+pt113cu116 \
        torch_geometric==2.2.0 \
        -f https://data.pyg.org/whl/torch-1.13.0+cu116.html \
    && pip3 install \
        dgl-cu113 \
        dglgo \
        -f https://data.dgl.ai/wheels/repo.html \
    && pip3 install \
        ase \
        e3nn \
        geotorch \
        mendeleev \
        networkx \
        ogb \
    # Dynamics
    && pip3 install \
    torchdiffeq==0.2.3 \
    # Remove Cache
    && rm -rf /root/.cache/pip

LABEL maintainer="Justin Baker"
LABEL email='baker@math.utah.edu'
LABEL description="Builds on nvidia/cuda image to provide a compatible machine learning stack, and related scientific computational resources."
LABEL version="2.0"

